To do

PLANETS

Change to a MVVM structure to simplify the planet class
have a base class "ViewModel" which has the MemberUpdated method and inherits the INotifyPropertyChanged
Then derive child classes from that for things like PlanetViewModel class
the window will then create a planet class and a planetviewmodel class, and link the two
then set the DataContext to be the planetviewmodel class

Half way through the random TL method
However some adjustments on the roll depend on the settlement type (i.e. Homeworld etc)

Change the "CheckRanges" on the planet class to just run when the key assumptions are changed
Could split into CheckGravityRange, etc.

Need window for marginal atmospheric options

At some point add in trade routes?  Can only really do once we have multiple planets or systems

SPECIES

Change species so that it has a preferred temperature, and temperature tolerance.  This then feeds into the habitability stats

Species creation window, using the random tables in the book.  Try to link as much as possible back to things like the
carrying capacity and habitability code

Could add in some mortality charts, to illustrate lifespan for various fit/long lifespan/longevity etc combinations
Allowing for the setting's TL (or a user input one, as could be considering life on a particular planet)

SETTING

Make the setting editable

SYSTEM

Add in the generation code for 

MAIN

Main window has a drop down with a list of planets, and buttons for new / edit / delete

Main window has a drop down with a list of species, and buttons for new / edit / delete
May need to ensure that aren't deleting a species which has a planet

Also can try to ensure that each species only has at most 1 Homeworld

GENERAL

Change everything to be protected instead of public

change to have a viewer class, which just feeds through to the planet class but does the memberupdate stuff
So that way can remove some of the UI update code from the base planet class
(This may be the MVVM approach?)